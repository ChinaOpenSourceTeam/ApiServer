<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chinaopensource.apiserver.blog.mapper.BlogMapper">
  <resultMap id="BaseResultMap" type="com.chinaopensource.apiserver.blog.data.Blog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uuid" jdbcType="CHAR" property="uuid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="version" jdbcType="TINYINT" property="version" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user" jdbcType="INTEGER" property="createUser" />
    <result column="create_user_name" jdbcType="VARCHAR" property="createUserName" />
    <result column="delete_flag" jdbcType="BIT" property="deleteFlag" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  
  <sql id="Base_Column_List">
    id, uuid, title,content, status, version, create_time, create_user, delete_flag, update_time
  </sql>
  
    <insert id="saveBlog" parameterType="com.chinaopensource.apiserver.blog.data.Blog" useGeneratedKeys="true" keyProperty="id">
    insert into blog (uuid, title, status, 
      version, create_time, create_user, 
      delete_flag, update_time, content
      )
    values (#{uuid,jdbcType=CHAR}, #{title,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT}, 
      #{version,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, 
      #{deleteFlag,jdbcType=BIT}, #{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  
  <select id="findBlogById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT node.* ,user.`nick_name` AS create_user_name 
    FROM node 
    	LEFT JOIN user ON node.`create_user` = user.`id`
    where node.id = #{id,jdbcType=INTEGER}
  </select>
  
   <update id="updateBlogById" parameterType="com.chinaopensource.apiserver.blog.data.Blog">
    update blog
    <set>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=CHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="deleteFlag != null">
        delete_flag = #{deleteFlag,jdbcType=BIT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  	<insert id="saveBlogTags">
  		INSERT INTO  blog_node (
  		blog_id ,
  		node_id) VALUES 
		<foreach collection="nodes" item="node" index="index"
			separator=",">
			(
			#{blogId,jdbcType=INTEGER},
			#{node,jdbcType=INTEGER}
			)
		</foreach>
	</insert>
	
  <select id="findBlogByUuidVersion"  resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blog
    where uuid = #{uuid,jdbcType=CHAR}
    <if test="version != null">
         AND VERSION = #{version,jdbcType=TINYINT}
    </if>
    <if test="version == null">
        ORDER BY VERSION DESC  LIMIT 1
    </if>
  </select>
  
  <select id="findBlogByNodeId"  parameterType="java.lang.Integer" resultMap="BaseResultMap">
  
	SELECT blog.*,user.`nick_name` AS create_user_name FROM blog LEFT JOIN user ON blog.`create_user` = user.`id` WHERE blog.`id` IN (
		SELECT blog_id FROM blog_node WHERE node_id = #{node,jdbcType=INTEGER}
	) 
	GROUP BY UUID
	  
  </select>
	
</mapper>